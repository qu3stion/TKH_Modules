Braun Payne
9 July 2021


1. Whenever you type a letter on a keyboard, there are numerous things that happen before that letter pops onto your screen. Of those many steps, there are three that are primarily at play. First, you press the desired key and the computer registers it’s code. Once the code is recognized, the computer searches in its database for the corresponding key. After the code and key are verified to match, the computer displays the key as it is coded into the computer by essentially sketching the code onto the screen as it is memorized from the database.
2. Computers use input and output to create experiences by making those experiences more convenient. Computers transform menial tasks into quick and easy actions. Tasks such as scheduling, documenting, and even communicating. Virtual banking alone proves the importance of input and output computing in modern society. Computers simply condense many different courses of action into one device, eliminating extraneous effort.
3. Software products are essentially “infinitely reproducible nothings” because they cost relatively nothing to construct. One could make a code, reproduce it at no cost, and sell it for a reasonable price which makes the profit margits almost innumerable when sold at high rates. The main cost of coding a program is the programmers’ time and effort, but once a widely applicable software is made, the minds behind it strike gold.
4. Code becomes software when a computer is able to identify sets of functions. Computers read these functions as step-by-step rules, in a way. When writing a code, your computer will interpret every character as it is typed in. However, until the function is written completely and accurately, the computer will not be able to decipher the action you desire it to perform. Once this function is readable by the computer, the coder will add additional functions that help the program operate in the desired fashion. 
5. An algorithm is used in coding to mitigate problems. The true value of algorithms lies in the simplification of functions. An algorithm takes corresponding functions and gives a solution to every one. An algorithm takes stress out of solving every individual problem by filtering those problems through an applicable set of properties and solving it.
6. The DRY principle means “don’t repeat yourself”, essentially to side-step unnecessary complications with the code. This also seems to make the code more understandable in the future as there would naturally be less clutter on the script.
7. Object-oriented coding is a system that helps make programming more organized. This system acts as a digital filing process that accurately catalogs functions and variables. 
8. Data is the stored knowledge a computer has. Data is formed from the application of code. The relationship between code and data is that “data” is, effectively, stored code.
9. Frameworks serve as practical templates for executing code. Frameworks come in many forms and can be used as shared platforms for programmers. Being that these frameworks are essentially outlines, they can be very limiting. However, frameworks serve a wider purpose in making coding accessible.
10. Debugging is the process of going over your code and editing out flaws. Bugs are imperfections in your code that, at one point or another, complicate how a given program runs. Debugging is common practice because small mistakes are liable to occur when typing at such a volume.
11. After reading this immersive article on coding, I understand coding more than I ever have. The article really put the art of programming into perfect perspective for me. I want to learn how to code because it is the present and the future. Reading this article and learning about the relatively short, but intricate, history illustrated how much coding has developed; yet, still, how much more it can develop. On top of that, I want to learn how to code because I like the creative aspect of it. I think it sometimes goes understated how artistic coding is in its nature. Not just through the many ways one could execute code into a captivating end-product, but also through the sheer discipline of the practice. It is a skill that may seem to come naturally to some, but the skills must still be honed through consistent training and implementation. My whole life I feel as though I’ve been looking for a practice, or art form, to dedicate to and coding feels like the perfect one for me. The pure satisfaction I received from making small functions work showed me that I would enjoy the process of learning to be a programmer on an even bigger level.